#define varA

#ifdef varA

#define VERSION "V1.1"
// BuildNumber.cpp : Defines the entry point for the console application.
//
// #include "stdafx.h"
#include "stdio.h"
#include "string.h"
#include "ctype.h"
#include "stdlib.h"

int main(int argc, char* argv[])
{
    char filename[1024];
    strcpy(filename,"buildnumber.h");
    char linebuf[1024];
    int nBuild=1;
    if (argc>1)
    {
        char *cmd=argv[1];
        strncpy(filename,cmd,1023);
    }
    printf("BuildNumber 1.0\n");
    printf("Â© S. Gregory 2016\n");
    FILE *fp=fopen(filename,"r+");
    if (fp)
    {
        memset(linebuf,0,sizeof(linebuf));
        int ctr=0;
        while(fgets(linebuf,1023,fp))
        {
            char *cctr;
            for(cctr=linebuf;*cctr;cctr++)
                *cctr=tolower(*cctr);
            char *pctr=linebuf;
            while((*pctr)&&(isspace(*pctr))) pctr++;
            if (strncmp(pctr,"#define buildnumber",19)==0)
            {
                nBuild=atol(pctr+19)+1;
                fclose(fp);
                fp=fopen(filename,"w");
                if (fp)
                {
                    fprintf(fp,"/* Generated by BuildNumber %s */ \n\n", VERSION);
                    fprintf(fp,"#ifndef BUILD_NUMBER_H_\n");
                    fprintf(fp,"#define BUILD_NUMBER_H_\n\n");
                    fprintf(fp,"#define BUILDNUMBER %d\n",nBuild);
                    fprintf(fp,"#define BUILDNUMBER_STR \"%03d\"\n",nBuild);
                    fprintf(fp,"#endif /* BUILD_NUMBER_H_ */\n");
                    printf("Build %d\n",nBuild);
                    fclose(fp);
                    return 0;
                }
                else
                {
                    printf("File Open Error\n");
                }
                return -1;
            }
        }
        printf("%s not valid\n",filename);
        fclose(fp);
        return -2;
    }
    else
    {
        fp=fopen(filename,"w");
        if (fp)
        {
            fprintf(fp,"/* Generated by BuildNumber  %s */ \n\n", VERSION);
            fprintf(fp,"#ifndef BUILD_NUMBER_H_\n");
            fprintf(fp,"#define BUILD_NUMBER_H_\n\n");
            fprintf(fp,"#define BUILDNUMBER %d\n",nBuild);
            fprintf(fp,"#define BUILDNUMBER_STR \"%04d\"\n\n",nBuild);
            fprintf(fp,"\n#endif /* BUILD_NUMBER_H_ */\n");
        }
        else
        {
            printf("File Open Error\n");
            return -1;
        }
        fclose(fp);
        printf("Build %d\n",nBuild);
        return 0;
    }
    return -3;
}
#else

#define VERSION "V2.0"

#include <stdio.h>
#include <string.h>
#include <limits.h>
#include <time.h>

int main(int argc, char* argv[]) {
    char fileName[FILENAME_MAX] = "buildNumber.h";
    char filePath[FILENAME_MAX] = "";

    //Get filename if it's passed
    if (argc > 1) {
        strcpy_s(fileName, FILENAME_MAX, argv[1]);
    }

    //Create the path to the executable folder
    char* prevToken;
    char* curToken;

    curToken = strtok(argv[0], "\\");

    do {
        prevToken = curToken;
        curToken = strtok(NULL, "\\");

        if (curToken != NULL) {
            strcat_s(filePath, FILENAME_MAX, prevToken);
            strcat_s(filePath, FILENAME_MAX, "\\");
        }
    } while (curToken != NULL);

    //Create File Path
    int nMax = FILENAME_MAX - strlen(filePath) - strlen(fileName);
    strncat_s(filePath, FILENAME_MAX, fileName, FILENAME_MAX - nMax);

    //File Generation
    FILE* fBuildNumber;
    unsigned int major = 0;
    unsigned int minor = 0;
    unsigned int build = 0;

    //Check if file exists
    fBuildNumber = fopen(filePath, "r");
    if (fBuildNumber != NULL) {
        //File exists. Parse it to read the file
        char* eof;
        char fileLine[100];

        eof = fgets(fileLine, sizeof(fileLine), fBuildNumber);
        while (eof != NULL) {
            char* token;
            token = strtok(fileLine, " ");
            if (strcmp(token, "#define") == 0) {
                //Define
                token = strtok(NULL, " ");
                if (strcmp(token, "VER_MAJOR") == 0) {
                    //Get Ver Major
                    token = strtok(NULL, " ");
                    if (token != NULL) {
                        if (sscanf_s(token, "%u", &major) == 0) {
                            //Error parsing VER_MAJOR
                            printf("Error while parsing VER_MAJOR. Check if integer\n");
                            return 2;
                        }
                    }
                }
                else if (strcmp(token, "VER_MINOR") == 0) {
                    //Get Ver Minor
                    token = strtok(NULL, " ");
                    if (token != NULL) {
                        if (sscanf_s(token, "%u", &minor) == 0) {
                            //Error parsing VER_MINOR
                            printf("Error while parsing VER_MINOR. Check if integer\n");
                            return 3;
                        }
                    }
                }
                else if (strcmp(token, "BUILDNUMBER") == 0) {
                    //Get Ver Build
                    token = strtok(NULL, " ");
                    if (token != NULL) {
                        if (sscanf_s(token, "%u", &build) == 0) {
                            //Error parsing BUILDNUMBER
                            printf("Error while parsing BUILDNUMBER. Check if integer\n");
                            return 3;
                        }

    
                    }
                }
            }

            eof = fgets(fileLine, sizeof(fileLine), fBuildNumber);
        }

        fclose(fBuildNumber);
    }


    //Increment build number
    if (++build >= 1000) {
        //Max build number reached. Set to zero and increment minor
        printf("Maximum Build number reached. Increment minor\n");
        build = 0;
        minor++;
        if (minor >= 100) {
            //Max minor number reached. Set to zero and increment major
            printf("Maximum minor number reached. Increment major\n");
            minor = 0;
            if (++major >= 100) {
                //Max version number reached. User should reset. Return ERROR
                printf("Maximum Build number reached. Please reset to zero\n");
                return 4;
            }
        }
    }
    //Create the new file
    fBuildNumber = fopen(filePath, "w");
    if (fBuildNumber != NULL) {

        time_t t;
        t = time(NULL);
        struct tm tm;
        tm = *localtime(&t);

        //File Created. Write the content
        fprintf(fBuildNumber, "/* Generated by BuildNumber %s */ \n\n", VERSION);
        fprintf(fBuildNumber, "#ifndef BUILD_NUMBER_H\n");
        fprintf(fBuildNumber, "#define BUILD_NUMBER_H\n");
        fprintf(fBuildNumber, "\n");
        fprintf(fBuildNumber, "#define BUILDNUMBER %d\n", build);
        fprintf(fBuildNumber, "#define BUILDNUMBER_STR \"%03d\"\n", build);
        fprintf(fBuildNumber, "#define VER_MAJOR %u\n", major);
        fprintf(fBuildNumber, "#define VER_MINOR %u\n", minor);
        fprintf(fBuildNumber, "#define VERSION_STR \"%u.%02u.%03u\"\n", major, minor, build);
        fprintf(fBuildNumber, "#define BUILDDATE_STR \"%d-%02d-%02d %02d:%02d:%02d\"\n", tm.tm_mon + 1, tm.tm_mday, tm.tm_year + 1900, tm.tm_hour, tm.tm_min, tm.tm_sec);
        fprintf(fBuildNumber, "\n");
        fprintf(fBuildNumber, "#endif\n");

        fflush(fBuildNumber);
        fclose(fBuildNumber);

        //Report to console
        printf("file updated. new build version %u.%u.%u\n", major, minor, build);
        return 0;
    }
    else {
        //Error in file creation.
        printf("Could not create file\n");
        return 1;
    }
}
#endif